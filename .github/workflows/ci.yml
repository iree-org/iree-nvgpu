# Copyright 2023 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: CI

# A few notes:
#
# This workflow models the IREE workflow of the same name; however, with this
# project in such an early state, it is far simpler. Still, we prefer to
# follow a similar structure as that one as we elaborate.

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit).
  group: ${{ github.event.number || github.sha }}
  cancel-in-progress: true

# Jobs are organized into groups and topologically sorted by dependencies
jobs:
  build_test_all_no_device:
    # TODO: Enable ci setup and use custom runners.
    runs-on: ubuntu-20.04-64core
    # runs-on:
    #   - self-hosted # must come first
    #   - runner-group=${{ inputs.runner-group }}
    #   - environment=${{ inputs.runner-env }}
    #   - cpu
    #   - os-family=Linux
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          submodules: true
      - name: "Setting up Python"
        uses: actions/setup-python@75f3110429a8c05be0e1bf360334e4cced2b63fa # v2.3.3
        with:
          python-version: "3.10"
      - name: Sync source deps
        run: |
          # First checkout without expensive submodules.
          # TODO: Move docker management to a dependency repo that we can
          # get at the beginning of time.
          # TODO: There is a bug in sync_deps.py where it fetches all submodules
          # if the regex excludes them all.
          # TODO: It would be nice to only sync requested dep for a case like
          # this.
          python ./sync_deps.py --exclude-submodule "iree:third_party/(llvm|mlir-hlo)"
          # Cache the docker image in the background before expensive submodule
          # checkout.
          echo "Pulling docker image in the background"
          docker image pull $(python ../iree/build_tools/docker/get_image_name.py base) &
          python ./sync_deps.py --depth 1 --submodules-depth 1
          echo "Waiting for docker pull"
          wait
      - name: Build and test
        run: |
          # We are checked out to something like:
          #   /work/openxla-nvgpu/openxla-nvgpu
          # Our deps are synced to:
          #   /work/openxla-nvgpu/iree
          # So we need to actually mount the parent directory when launching
          # in docker and then use relative paths into this project.
          # TODO: Get an nvidia image with CUDNN installed. For now, the base
          # image has enough of the SDK to build everything else.
          export DOCKER_HOST_WORKDIR="${GITHUB_WORKSPACE}/.."
          export DOCKER_HOST_TMPDIR="${RUNNER_TEMP}"
          ../iree/build_tools/docker/docker_run.sh \
            $(python ../iree/build_tools/docker/get_image_name.py base) \
            ./openxla-nvgpu/build_tools/cmake/build_test_all_no_device.sh \
              ./openxla-nvgpu ./build
